services:

  nginx:
    build:
      args:
        NODE_PROJET: ${NODE_PROJET}
        FRONTEND_PATH: ${FRONTEND_PATH}
      context: container/nginx
      dockerfile: Dockerfile
    container_name: transcendence_nginx
    depends_on:
      - backend
      - frontend
    environment:
      NODE_PROJET: ${NODE_PROJET}
      FRONTEND_PATH: ${FRONTEND_PATH}
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - backend_data:${BACKEND_PATH}
      - frontend_data:${FRONTEND_PATH}
      - shared:/etc/nginx/ssl
      - build_data:/var/www/html/frontend
    restart: always
    networks:
      - iron_network

  backend:
    build:
      context: container/backend
      dockerfile: Dockerfile
    container_name: transcendence_backend
    environment:
      - NODE_PROJET=${NODE_PROJET}
      - BACKEND_PATH=${BACKEND_PATH}
    volumes:
      - backend_data:${BACKEND_PATH}
    working_dir: ${BACKEND_PATH}
    restart: always
    networks:
      - iron_network

  frontend:
    build:
      context: container/frontend
      dockerfile: Dockerfile
    container_name: transcendence_frontend
    environment:
      - NODE_PROJET=${NODE_PROJET}
    volumes:
      - frontend_data:${FRONTEND_PATH}
      - build_data:/var/www/html/frontend
    working_dir: ${FRONTEND_PATH}
    restart: always
    networks:
      - iron_network

volumes:
  shared:
    driver: local
    driver_opts:
      type: none
      device: ${SHARED_PATH}
      o: bind
  backend_data:
    driver: local
    driver_opts:
      type: none
      device: ${BACKEND_PATH}
      o: bind
  frontend_data:
    driver: local
    driver_opts:
      type: none
      device: ${FRONTEND_PATH}
      o: bind
  build_data:
    driver: local
    driver_opts:
      type: none
      device: ${BUILD_PATH}
      o: bind

networks:
  iron_network:
    driver: bridge
